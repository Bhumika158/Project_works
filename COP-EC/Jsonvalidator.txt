import ssl
import os
from flask import Flask, request, abort
from OpenSSL import crypto
from app import create_app
from Config.config import CERT_PATH, KEY_PATH, CERT_PASS

app = create_app()

# Load all trusted leaf certificates from Valcred/
def load_trusted_client_certs(cert_dir="Valcred"):
    certs = []
    for filename in os.listdir(cert_dir):
        if filename.endswith(".pem"):
            with open(os.path.join(cert_dir, filename), "rb") as f:
                cert_data = f.read()
                cert = crypto.load_certificate(crypto.FILETYPE_PEM, cert_data)
                certs.append(cert)
    return certs

# Preload trusted certs
trusted_client_certs = load_trusted_client_certs()

# Middleware to validate presented client cert
@app.before_request
def validate_client_cert():
    cert = request.environ.get("peercert")
    if not cert:
        abort(403, "Client certificate missing")

    client_fp = cert.digest("sha256")
    whitelist_fps = [c.digest("sha256") for c in trusted_client_certs]

    if client_fp not in whitelist_fps:
        abort(403, "Client certificate is not trusted")

# TLS context setup
def create_ssl_context():
    context = ssl.create_default_context(ssl.Purpose.CLIENT_AUTH)
    context.verify_mode = ssl.CERT_REQUIRED
    context.load_cert_chain(certfile=CERT_PATH, keyfile=KEY_PATH, password=CERT_PASS)

    # Trust CAs or accept self-signed if whitelisting leaf certs
    context.load_verify_locations(capath="Valcred")  # Can also be a .pem bundle

    return context

# Patch peer cert into request.environ (Flask does NOT do this natively)
from werkzeug.serving import WSGIRequestHandler, run_simple

class CustomRequestHandler(WSGIRequestHandler):
    def make_environ(self):
        environ = super().make_environ()
        if self.connection:
            try:
                peer_cert_bin = self.connection.getpeercert(binary_form=True)
                if peer_cert_bin:
                    cert = crypto.load_certificate(crypto.FILETYPE_ASN1, peer_cert_bin)
                    environ['peercert'] = cert
            except Exception as e:
                print(f"Warning: Failed to extract client cert: {e}")
        return environ

if __name__ == "__main__":
    ssl_context = create_ssl_context()
    run_simple(
        hostname="0.0.0.0",
        port=58002,
        application=app,
        ssl_context=ssl_context,
        request_handler=CustomRequestHandler
    )
